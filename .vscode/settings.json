{
    "folderTemplates.fileTemplates": {
        "Init API": [
          "import get from \"../../../axios/get\";",
          "import post from \"../../../axios/post\";",
          "import deleteAxios from \"../../../axios/delete\";",
          "import put from \"../../../axios/put\";",
          "import word from \"../../../shared/static\";",
          "const <FTName | camelcase> = {",
          "  getAll<FTName |capitalcase?replace(' ', '')>: async () => {",
          "\tconst response = await get.AxiosGet(word.URL_GET_ALL_<FTName | constantcase>);",
          "\treturn response;",
          "  },",
          "  add<FTName |capitalcase?replace(' ', '')>: async (data) => {",
          "\tconst response = await post.AxiosPost(word.URL_ADD_<FTName | constantcase>, data);",
          "\treturn response;",
          "  },",
          "  delete<FTName |capitalcase?replace(' ', '')>: async (data) => {",
          "\tconst response = await deleteAxios.AxiosDelete(",
          "\t  word.URL_DELETE_<FTName | constantcase> + data",
          "\t);",
          "\treturn response;",
          "  },",
          "  edit<FTName |capitalcase?replace(' ', '')>: async (url, data) => {",
          "\tconst response = await put.AxiosPut(word.URL_UPDATE_<FTName | constantcase> + url, data);",
          "\treturn response;",
          "  },",
          "};",
          "",
          "export default <FTName | camelcase>;"
        ],
  
        "Init Middleware": [
          "//API => call api in infrastructure -> service -> api",
          "// log => for call console.log and dynamic console.log",
          "//writeLocal for write data to local ( dynamic write depend on mode in env) if production its automatically encrypted",
          "//getLocal for get data from local ( dynamic write depend on mode in env) if production its automatically encrypted",
          "// toas for show toast to screen, its have 4 varians (.Success , .Failed, .Warning, .Info)",
          "// sweetalert for show sweetalert to screen, its have 4 varians (.Success , .Failed, .Warning, .Info)",
          "// dispatch for dispactching action, like store data to reducer, and others",
          "// getState is FUNCTION for get current data in your state (reducer), just call getState().yourReducer.yourData",
          "",
          "import {",
          "\tADD_<FTName | constantcase>,",
          "\tDELETE_<FTName | constantcase>,",
          "\tEDIT_<FTName | constantcase>,",
          "\tGET_ALL_<FTName | constantcase>,",
          "\tsetData<FTName |capitalcase?replace(' ', '')>Failed,",
          "\tsetData<FTName |capitalcase?replace(' ', '')>Success,",
          "  } from \"../actions/<FTName | replace(' ', '-')?snakecase>\";",
          "  import { setLoading, setLoadingButton, setShowModal } from \"../actions/ui\";",
          "  import word from \"../../infrastructure/shared/static\";",
          "  import { change } from \"redux-form\";",
          "  const handleGetFlow =",
          "\t({ api, log, writeLocal, getLocal, toast, sweetalert }) =>",
          "\t({ dispatch, getState }) =>",
          "\t(next) =>",
          "\tasync (action) => {",
          "\t  next(action);",
          "\t  if (action.type === GET_ALL_<FTName | constantcase>) {",
          "\t\tconst fullscreen = action.payload.data;",
          "\t\tfullscreen ? dispatch(setLoading(true)) : console.log(\"just ignore me..\");",
          "\t\tconst response = await api.<FTName | replace(' ', '-')?camelcase>.getAll<FTName |capitalcase?replace(' ', '')>();",
          "\t\tif (response?.value !== null) {",
          "\t\t  toast.Success(\"ambil data berhasil..\");",
          "\t\t  dispatch(setData<FTName |capitalcase?replace(' ', '')>Success({ feedback: response?.value }));",
          "\t\t  fullscreen ? dispatch(setLoading(false)) : console.log();",
          "\t\t} else {",
          "\t\t  toast.warning(\"ambil data gagal, silahkan refresh halaman\");",
          "\t\t  dispatch(setData<FTName |capitalcase?replace(' ', '')>Failed({ error: response?.error }));",
          "\t\t  fullscreen ? dispatch(setLoading(false)) : console.log();",
          "\t\t}",
          "\t  }",
          "\t};",
          "  ",
          "  const handleAddFlow =",
          "\t({ api, log, writeLocal, getLocal, toast, sweetalert }) =>",
          "\t({ dispatch, getState }) =>",
          "\t(next) =>",
          "\tasync (action) => {",
          "\t  next(action);",
          "\t  if (action.type === ADD_<FTName | constantcase>) {",
          "\t\tdispatch(setLoadingButton(true));",
          "\t\tconst isEdit = getState().<FTName | replace(' ', '-')?camelcase>.isEdit;",
          "\t\tconst data = getState().form?.Form<FTName |capitalcase?replace(' ', '')>?.values;",
          "\t\tconst keyEdit = data?.kode_<FTName | replace(' ', '-')?camelcase>;",
          "\t\tlet response = \"\";",
          "\t\tif (isEdit) {",
          "\t\t  delete data.kode_<FTName | replace(' ', '-')?camelcase>;",
          "\t\t  response = await api.<FTName | replace(' ', '-')?camelcase>.edit<FTName |capitalcase?replace(' ', '')>(keyEdit, data);",
          "\t\t} else {",
          "\t\t  response = await api.<FTName | replace(' ', '-')?camelcase>.add<FTName |capitalcase?replace(' ', '')>(data);",
          "\t\t}",
          "\t\tif (response?.value !== null) {",
          "\t\t  const newestData = await api.<FTName | replace(' ', '-')?camelcase>.getAll<FTName |capitalcase?replace(' ', '')>();",
          "\t\t  if (newestData?.value !== null) {",
          "\t\t\ttoast.Success(\"Berhasil Tambah barang\");",
          "\t\t\tdispatch(setData<FTName |capitalcase?replace(' ', '')>Success({ feedback: newestData?.value }));",
          "\t\t\tdispatch(setLoadingButton(false));",
          "\t\t\tdispatch(setShowModal(false));",
          "\t\t  } else {",
          "\t\t\ttoast.Failed(\"Gagal Ambil Data Terbaru\");",
          "\t\t\tdispatch(setData<FTName |capitalcase?replace(' ', '')>Failed({ error: newestData?.error }));",
          "\t\t\tdispatch(setLoadingButton(false));",
          "\t\t  }",
          "\t\t} else {",
          "\t\t  toast.Failed(\"Gagal Tambah data <FTName | replace(' ', '-')?camelcase>\");",
          "\t\t  dispatch(setLoadingButton(false));",
          "\t\t}",
          "\t  }",
          "\t};",
          "  ",
          "  const handleDeleteFlow =",
          "\t({ api, log, writeLocal, getLocal, toast, sweetalert }) =>",
          "\t({ dispatch, getState }) =>",
          "\t(next) =>",
          "\tasync (action) => {",
          "\t  next(action);",
          "\t  if (action.type === DELETE_<FTName | constantcase>) {",
          "\t\tconst data = action.payload.data;",
          "\t\tconst response = await sweetalert.ConfirmDelete(",
          "\t\t  word.URL_DELETE_<FTName | constantcase> + data",
          "\t\t);",
          "\t\tif (response?.value !== null) {",
          "\t\t  toast.Success(\"Hapus Data Berhasil\");",
          "\t\t  const getNewest = await api.<FTName | replace(' ', '-')?camelcase>.getAll<FTName |capitalcase?replace(' ', '')>();",
          "\t\t  if (getNewest?.value !== null) {",
          "\t\t\tdispatch(setData<FTName |capitalcase?replace(' ', '')>Success({ feedback: getNewest?.value }));",
          "\t\t\ttoast.Success(\"Ambil Data Terbaru Berhasil\");",
          "\t\t  } else {",
          "\t\t\tdispatch(setData<FTName |capitalcase?replace(' ', '')>Failed({ error: getNewest?.error }));",
          "\t\t\ttoast.Failed(\"Gagal Ambil Data Terbaru\");",
          "\t\t  }",
          "\t\t} else {",
          "\t\t  toast.Failed(\"Gagal Hapus Data\");",
          "\t\t}",
          "\t  }",
          "\t};",
          "  ",
          "  const handleEditFlow =",
          "\t({ api, log, writeLocal, getLocal, toast, sweetalert }) =>",
          "\t({ dispatch, getState }) =>",
          "\t(next) =>",
          "\tasync (action) => {",
          "\t  next(action);",
          "\t  if (action.type === EDIT_<FTName | constantcase>) {",
          "\tdispatch(setShowModal(true));",
          "\t\tconst data = action.payload.data;",
          "\t\tdispatch(change(\"Form<FTName |capitalcase?replace(' ', '')>\", \"kode_<FTName | replace(' ', '-')?camelcase>\", data?.kode_<FTName | replace(' ', '-')?camelcase>));",
          "\t\tdispatch(change(\"Form<FTName |capitalcase?replace(' ', '')>\", \"nama_<FTName | replace(' ', '-')?camelcase>\", data?.nama_<FTName | replace(' ', '-')?camelcase>));",
          "\t  }",
          "\t};",
          "  ",
          "  const data = [handleGetFlow, handleAddFlow, handleDeleteFlow, handleEditFlow];",
          "  ",
          "  export default data;",
          "  "
        ],
        "Init Actions": [
          "export const GET_ALL_<FTName | constantcase> = \"[<FTName | replace(' ', '-')?camelcase>] get all <FTName | replace(' ', '-')?camelcase>\";",
            "export const IS_EDIT_<FTName | constantcase> = \"[<FTName | replace(' ', '-')?camelcase>] is edit <FTName | replace(' ', '-')?camelcase>\";",
            "export const DELETE_<FTName | constantcase> = \"[<FTName | replace(' ', '-')?camelcase>] deleting <FTName | replace(' ', '-')?camelcase>\";",
            "export const EDIT_<FTName | constantcase> = \"[<FTName | replace(' ', '-')?camelcase>] editing <FTName | replace(' ', '-')?camelcase>\";",
            "export const ADD_<FTName | constantcase> = \"[<FTName | replace(' ', '-')?camelcase>] adding <FTName | replace(' ', '-')?camelcase>\";",
            "export const SET_DATA_<FTName | constantcase>_SUCCESS = \"[<FTName | replace(' ', '-')?camelcase>] get all <FTName | replace(' ', '-')?camelcase> success\";",
            "export const SET_DATA_<FTName | constantcase>_FAILED = \"[<FTName | replace(' ', '-')?camelcase>] get all <FTName | replace(' ', '-')?camelcase> failed\";",
            "",
            "export const getAll<FTName |capitalcase?replace(' ', '')> = ({ fullscreen }) => ({",
            "  type: GET_ALL_<FTName | constantcase>,",
            "  payload: {",
            "\tdata: fullscreen,",
            "  },",
            "});",
            "export const isEdit<FTName |capitalcase?replace(' ', '')> = ({ data }) => ({",
            "  type: IS_EDIT_<FTName | constantcase>,",
            "  payload: { data : data},",
            "});",
            "export const delete<FTName |capitalcase?replace(' ', '')> = ({ data }) => ({",
            "  type: DELETE_<FTName | constantcase>,",
            "  payload: {",
            "\tdata: data,",
            "  },",
            "});",
            "",
            "export const edit<FTName |capitalcase?replace(' ', '')> = ({ data }) => ({",
            "  type: EDIT_<FTName | constantcase>,",
            "  payload: {",
            "\tdata: data,",
            "  },",
            "});",
            "",
            "export const add<FTName |capitalcase?replace(' ', '')> = {",
            "  type: ADD_<FTName | constantcase>,",
            "};",
            "",
            "export const setData<FTName |capitalcase?replace(' ', '')>Failed = ({ error }) => ({",
            "  type: SET_DATA_<FTName | constantcase>_FAILED,",
            "  payload: { data: error },",
            "});",
            "export const setData<FTName |capitalcase?replace(' ', '')>Success = ({ feedback }) => ({",
            "  type: SET_DATA_<FTName | constantcase>_SUCCESS,",
            "  payload: { data: feedback },",
            "});",
            ""
        ],
        "Init Reducer": [
              "// Type your data here, it can be string, or any type of data, just write your variable",
              "import {",
              "SET_DATA_<FTName | constantcase>_SUCCESS,",
              "SET_DATA_<FTName | constantcase>_FAILED,",
              "IS_EDIT_<FTName | constantcase>",
              "} from \"../actions/<FTName | replace(' ', '-')?snakecase>\";",
              "const initialState = {",
              "feedback: [],",
              "error: null,",
              "isEdit: false,",
              "};",
              "",
              "const <FTName | camelcase> = (state = initialState, action) => {",
              "  switch (action.type) {",
              "\tcase SET_DATA_<FTName | constantcase>_SUCCESS :",
              "\t  return {",
              "\t\t...state,",
              "\t\tfeedback : action.payload.data",
              "\t  }",
              "\tcase SET_DATA_<FTName | constantcase>_FAILED :",
              "\t  return {",
              "\t\t...state,",
              "\t\terror : action.payload.data",
              "\t  }",
              "\tcase IS_EDIT_<FTName | constantcase> :",
              "\t  return {",
              "\t\t...state,",
              "\t\tisEdit : action.payload.data",
              "\t  }",
              "\tdefault:",
              "\t  return state;",
              "  }",
              "};",
              "",
              "export default <FTName | camelcase>;"
            
        ],
        "Init Selector": [
          "const getAll<FTName |capitalcase?replace(' ', '')>= (state) => state.<FTName | replace(' ', '-')?camelcase>.feedback;",
          "const getError<FTName |capitalcase?replace(' ', '')>= (state) => state.<FTName | replace(' ', '-')?camelcase>.error;",
          "const getIsEdit<FTName |capitalcase?replace(' ', '')>= (state) => state.<FTName | replace(' ', '-')?camelcase>.isEdit;",
          "const data = { getAll<FTName |capitalcase?replace(' ', '')>, getError<FTName |capitalcase?replace(' ', '')>,getIsEdit<FTName |capitalcase?replace(' ', '')> };",
          "export default data;"
            
        ],
      },
      "folderTemplates.structures": [
          {
              "name": "Create Application Structure",
              "customVariables": [],
              "omitParentDirectory": true,
              "overwriteExistingFiles": "always",
              "structure": [
                {
                  "fileName": "application/actions/<FTName | snakecase>.jsx",
                  "template": "Init Actions"
                },
                {
                  "fileName": "application/middleware/<FTName | snakecase>.jsx",
                  "template": "Init Middleware"
                },
                {
                  "fileName": "application/reducers/<FTName | snakecase>.jsx",
                  "template": "Init Reducer"
                },
                {
                  "fileName": "application/selectors/<FTName | snakecase>.jsx",
                  "template": "Init Selector"
                },
                {
                  "fileName": "infrastructure/services/api/<FTName | snakecase>/index.jsx",
                  "template": "Init API"
                },
              ]
            }
      ]
}